version: '3.3'

services:
  app:
    container_name: app
    build: .
    ports:
      - "8888:8888"
    volumes:
      - .:/app
    restart: always


  worker1:
    container_name: worker1
    build: .
    command: celery -A Django_Celery_Flower worker -B -l info -Q queue1
    volumes:
      - .:/app
    depends_on:
      - app
      - rabbitmq

  worker2:
    container_name: worker2
    build: .
    command: celery -A Django_Celery_Flower worker -l info -Q queue2
    volumes:
      - .:/app
    depends_on:
      - app
      - rabbitmq

  worker3:
    container_name: worker3
    build: .
    command: celery -A Django_Celery_Flower worker -B -l info
    volumes:
      - .:/app
    depends_on:
      - app
      - rabbitmq

  rabbitmq:
    image: "rabbitmq"
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    depends_on:
      - app

  flower:
    container_name: flower
    build: .
    command: celery -A Django_Celery_Flower flower --port=5555
    volumes:
      - .:/app
    ports:
      - "5556:5555"
    depends_on:
      - rabbitmq
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile  # Path to the Dockerfile inside the 'docker/' folder
    command: gunicorn myproject.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - rabbitmq
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"   # AMQP protocol port for Celery
      - "15672:15672"  # Management UI port for RabbitMQ
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  celery:
    build:
      context: .
      dockerfile: docker/Dockerfile  # Reuse the same Dockerfile for the Celery worker
    command: celery -A myproject worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - rabbitmq