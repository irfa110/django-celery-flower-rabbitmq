version: "3.3"
services:
  # my-db:
  #   image: mariadb:10.5.8
  #   container_name: my-db
  #   restart: always
  #   ports:
  #     - ${MYSQL_DB_PORT}:3306
  #   command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  #     MYSQL_DATABASE: ${MYSQL_DATABASE}
  #     MYSQL_DB_PORT: ${MYSQL_DB_PORT}
  #     MYSQL_USER: ${MYSQL_USER}
  #     MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  #   volumes:
  #     - mydata:/var/lib/mysql
  #   networks:
  #     - elastic
  my-db:
    image: postgres:13
    container_name: my-db
    restart: always
    ports:
      - ${POSTGRES_DB_PORT}:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - mydata:/var/lib/postgresql/data
    networks:
      - elastic


  backend:
    build:
      context: .
      dockerfile: env/Dockerfile
    entrypoint: [ "./env/dev/docker-entrypoint.sh" ]
    tty: true
    stdin_open: true
    volumes:
      - .:/app
    ports:
      - ${DJANGO_SERVER_PORT}:${DJANGO_SERVER_PORT}
    depends_on:
      - my-db
    environment:
      DJANGO_SERVER_PORT: ${DJANGO_SERVER_PORT}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    networks:
      - elastic

  rabbitmq:
    image: rabbitmq:3.8.21-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}" # access rabbitmq management plugin on this port
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
    networks:
      - elastic

  celery-worker:
    restart: always
    build:
      context: .
      dockerfile: env/Dockerfile
    entrypoint: [ "./env/dev/celery-worker-entrypoint.sh" ]
    volumes:
      - .:/app
    depends_on:
      - backend
      - my-db
      - rabbitmq
    networks:
      - elastic

  celery-beat:
    restart: always
    build:
      context: .
      dockerfile: env/Dockerfile
    entrypoint: [ "./env/dev/celery-beat-entrypoint.sh" ]
    volumes:
      - .:/app
    depends_on:
      - backend
      - my-db
      - rabbitmq
    networks:
      - elastic

  flower:
    image: mher/flower
    build:
      context: .
      dockerfile: env/Dockerfile
    entrypoint: [ "./env/dev/celery-flower-entrypoint.sh" ]
    ports:
      - "${CELERY_FLOWER_PORT}:5555"
    volumes:
      - .:/app
    depends_on:
      - backend
      - rabbitmq
      - celery-worker
    networks:
      - elastic

  # Prometheus service
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - elastic
    depends_on:
      - backend
      - celery-worker
      - rabbitmq

  # Grafana service
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - elastic
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "admin"  # Grafana admin password

volumes:
  mydata:
  rabbitmqdata:
  # redisdata:

networks:
  elastic:
    driver: bridge